install.packages("swirl")
library(swirl)
library(swirl)
swirl()
isTRUE(6>4)
identical('twins','twins')
xor(5==6,!FALSE)
ints<-sample(10)
ints
ints>5
which(ints>7)
any(ints<0)
all(ints>0)
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function
sum(my_vector)/(length(my_vector))
my_mean <- function (my_vector) {
sum(my_vector)/length(my_vector)
}
#
# Hint #3: The mean of all the numbers in a vector is equal to the sum of all of
#		   the numbers in the vector divided by the size of the vector.
#
# Note for those of you feeling super clever: Please do not use the mean()
# function while writing this function. We're trying to teach you something
# here!
#
# Be sure to save this script and type submit() in the console after you make
# your changes.
my_vector<-c(1,2,3)
sum(x)/length(x)
submit()
sum(my_vector)/length(my_vector)
submit()
#
# Hint #3: The mean of all the numbers in a vector is equal to the sum of all of
#		   the numbers in the vector divided by the size of the vector.
#
# Note for those of you feeling super clever: Please do not use the mean()
# function while writing this function. We're trying to teach you something
# here!
#
# Be sure to save this script and type submit() in the console after you make
# your changes.
my_mean <- function (my_vector) {
(sum(my_vector))/(length(my_vector))
}
submit()
mean
sum(my_vector)/length(my_vector)
submit()
sum/length
x/y
x<-sum(my_vector)
#
# Hint #3: The mean of all the numbers in a vector is equal to the sum of all of
#		   the numbers in the vector divided by the size of the vector.
#
# Note for those of you feeling super clever: Please do not use the mean()
# function while writing this function. We're trying to teach you something
# here!
#
# Be sure to save this script and type submit() in the console after you make
# your changes.
my_mean <- function(my_vector) {
x<-sum(my_vector)
y<-length(my_vector)
x/y
}
#
# Hint #3: The mean of all the numbers in a vector is equal to the sum of all of
#		   the numbers in the vector divided by the size of the vector.
#
# Note for those of you feeling super clever: Please do not use the mean()
# function while writing this function. We're trying to teach you something
# here!
#
# Be sure to save this script and type submit() in the console after you make
# your changes.
my_mean <- function(my_vector) {
sum(my_vector)/length(my_vector)
}
submit()
sum()/length()
#
# Hint #3: The mean of all the numbers in a vector is equal to the sum of all of
#		   the numbers in the vector divided by the size of the vector.
#
# Note for those of you feeling super clever: Please do not use the mean()
# function while writing this function. We're trying to teach you something
# here!
#
# Be sure to save this script and type submit() in the console after you make
# your changes.
my_mean <- function(my_vector) {
sum()/length()
}
submit()
my_vector
my_mean(my_vector)
#
# Hint #3: The mean of all the numbers in a vector is equal to the sum of all of
#		   the numbers in the vector divided by the size of the vector.
#
# Note for those of you feeling super clever: Please do not use the mean()
# function while writing this function. We're trying to teach you something
# here!
#
# Be sure to save this script and type submit() in the console after you make
# your changes.
my_mean <- function(my_vector) {
sum(my_vector)/length(my_vector)
}
my_mean(my_vector)
submit()
submit()
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor=11,num=5)
remainder(4,div-2)
remainder(4,div=2)
args(remainder)
submit()
evaluate()
evaluate(sd,c(1.4,3.6,7.9,8.8)
evaluate(sd(), c(1.4,3.6,7.9,8.8)
evaluate(sd(), c(1.4,3.6,7.9,8.8))
evaluate(sd, c(1.4,3.6,7.9,8.8))
evaluate(function(x){x+1},6)
evaluate(function(x){x=8},c(8,4,0))
evaluate(function(x){x1},c(8,4,0))
evaluate(function(x){x[1]},c(8,4,0))
evaluate(function(x){x[length(x)]},c(9,4,0))
evaluate(function(x){x[length(x)]},c(8,4,0))
?paste
paste("Programming","is","fun!")
submit()
telegram("Hello!")
submit()
submit()
noun<-args[["noun"]]
madlibs(place="Beckley",adjective"mutant",noun="duck")
madlibs(place="Beckley",adjective="mutant",noun="duck")
mad_libs(place="Beckley",adjective="mutant",noun="duck")
submit()
submit()
submit()
"I" %p% "love" %p% "R!"
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(y=cars$speed, x=cars$dist)
plot(x=cars$speed, y=cars$dist)
plot(x=cars$dist, y=cars$speed)
plot(x=cars$speed, y=cars$dist)
plot(cars)
plot(x=cars$speed, y=cars$dist, xlab="Speed")
plot(x=cars$speed, y=cars$dist, xlab="Speed",ylab="Stopping Distance")
plot(x=cars$speed, y=cars$dist,ylab="Stopping Distance")
plot(x=cars$speed, y=cars$dist, ylab="Stopping Distance",xlab="Speed" )
plot(cars,main:"My Plot")
plot(cars,main="My Plot")
plot(cars,main="My Plot", sub="My Plot Subtitle")
plot(cars,sub="My Plot Subtitle")
plot(cars,col=2)
plot(cars, clim=c(10,15))
plot(cars, xlim=c(10,15))
plot(cars, pch=2)
data_frame(mtcars)
data.frame(mtcars)
data(mtcars)
boxplot()
?boxplot
boxplot(data=mtcars,mpg~cyl)
boxplot(data=mtcars,formula= mpg~cyl)
boxplot(formula=mpg~cyl,data=mtcars)
hist(mtcars$mpg)
bye()
